{"name":"Sleepy-mustache","tagline":"A simple PHP Framework","body":"[] (\\mainpage <|:{)\r\n\r\nDoxygen [Documentation] (http://www.sleepymustache.com/documentation/html/index.html) is available.\r\n\r\nSleepy mustache is a PHP framework that comes with solutions for everyday php\r\nchallenges.  Most of the functionality is optional and tries to be as minimalist\r\nas possible.\r\n\r\nFunctionality\r\n--------------------------------------------------------------------------------\r\n\r\n### Core Functionality\r\n\r\nThe core is the basic functions that modules build off of\r\n\r\n* **Debugging** -\r\n    Easily send debug information via the browser, email, or database\r\n\r\n* **Hooks** -\r\n    Assign functions to run at specific hook points throughout the loading\r\n    process. This module is responsible for handling almost all functionality.\r\n\r\n* **Benchmarking**\r\n    Lets you time the speed of functions\r\n\r\n* **Templating** -\r\n    Basic templating functionality lets you separate business logic for the\r\n    view. It replaces placeholders like \"{{ title }}\" with data\r\n\r\n### Default Modules\r\n\r\nSome modules are enabled by default. To disable the modules move them from the\r\n\"enabled\" folder and put them into the \"disabled\" folder\r\n\r\n* **Navigation** -\r\n    Creates a UL that can be used for a navigation\r\n\r\n* **URL Class** -\r\n    Adds a class based on the current page. /user/jaime will have a class added\r\n    to the body that says \"user-jaime-index\". Additionally /user would be\r\n    \"user-index\"\r\n\r\n### Available Modules\r\n\r\nMost modules are disabled by default. To enable the modules move them from the\r\ninto the \"disabled\" folder into \"enabled\" folder\r\n\r\n* **CRUD** -\r\n    Create, Read, Update, Delete functionality using PDO\r\n\r\n* **File System Database** -\r\n    A basic database that uses flat files and JSON documents\r\n\r\n* **IP 2 Country detection** -\r\n    Uses the IP address to detect the country of origin.\r\n\r\n* **Mobile device detection** -\r\n    Can detect mobile and tablet devices\r\n\r\n* **CSV creation** -\r\n    CRUD class for CSV files\r\n\r\n* **Emailing** -\r\n    Basic email functionality with RFC email validation\r\n\r\n* **Robo Caller SOAP API (class.robotalker.php)** -\r\n    Class for interacting with the robotalker API\r\n\r\n* **SQL Select to DB Grid (class.dbgrid.php)** -\r\n    Turns a SQL Select statement into a table with hook points\r\n\r\n* **Memcache** -\r\n    Improve performance by implementing memcaching of pages (10 second default)\r\n\r\n* **Users** -\r\n    Basic user and roles functionality includes auth, roles, and permissions\r\n\r\n### Sample Modules\r\n\r\nThese module have little-to-no practical use, but help demonstrate how to build\r\nsimple modules with hook points.\r\n\r\n* **Timer** -\r\n    A module that replaces the {{ timer }} with the time it took the framework\r\n    to generate the page.\r\n* **Wizard Title** -\r\n    This module prepends an ASCII wizard to the title of the page.\r\n\r\n\r\nGetting Started\r\n--------------------------------------------------------------------------------\r\nThere are a few globals you will want to set in the include/globals.php file.\r\n\r\n* Setup debugging\r\n* Set Live site URL\r\n* Set DB credentials for live/stage\r\n* Set Emailing info for live/stage\r\n* Setup GA Account for live/state\r\n\r\nSample Code\r\n--------------------------------------------------------------------------------\r\n### Hooks\r\n\r\nThe *Hooks* system is made up of *hook filters* and *hook actions*. *Hook\r\nactions* are points in the code where you can assign functions to run. For\r\nexample, we can put a *hook action* after a record is saved to the database,\r\nthen assign a function to the *hook action* that will send an email after\r\nthe DB update.\r\n\r\n\t// Save to the database\r\n\t$db->save();\r\n\r\n\t// add a hook action\r\n\tHook::addAction('record_saved');\r\n\r\n\t// Add a function to the hook action\r\n\tfunction send_email() {\r\n\t\t// send an email saying a record was updated\r\n\t}\r\n\r\n\tHook::doAction(\r\n\t\t'record_saved',\r\n\t\t'send_email'\r\n\t);\r\n\r\n*Hook filters* are similar to *hook actions* but pass data as\r\nparameters to the functions that get assigned to the hook. After manipulating\r\nthis data you should return the edited data back to the program.\r\n\r\n\t// add a hook filter\r\n\t$content = Hook::addFilter('update_content', $_POST['content']);\r\n\r\n\t// Add a function to the hook filter\r\n\tfunction clean_html ($html) {\r\n\t\t$c = htmlentities(trim($html), ENT_NOQUOTES, \"UTF-8\", false);\r\n\t\treturn $c;\r\n\t}\r\n\r\n\tHook::applyFilter(\r\n\t\t'update_content',\r\n\t\t'clean_html'\r\n\t);\r\n\r\nThe *modules/enabled* directory provides a convenient location to put code that\r\nutilized the hooks system. Code inside of the *modules/enabled* directory are\r\nautomatically added to the program at runtime.\r\n\r\n\r\n### Templating\r\n\r\nTemplates reside inside the *'/templates/'* folder and should end in a .tpl\r\nextension. The templating system works by using placeholders that later get\r\nreplaced with text. The placeholders must have the following syntax:\r\n\r\n\t{{ placeholder }}\r\n\r\nTo use a template you instantiate the template class passing in the template\r\nname. You then bind data to the placeholders and call the *Template::show()*\r\nmethod.\r\n\r\n\trequire_once('include/sleepy.php');\r\n\r\n\t$page = new Template('default');\r\n\t$page->bind('title', 'Sleepy Mustache');\r\n\t$page->bind('header', 'Hello world!');\r\n\t$page->show();\r\n\r\nHere is the sample template file (templates/default.tpl)\r\n\r\n\t<html>\r\n\t\t<head>\r\n\t\t\t<title>{{ title }}</title>\r\n\t\t</head>\r\n\t\t<body>\r\n\t\t\t<h1>{{ header }}</h1>\r\n\t\t\t<p>This page has been viewed {{ hits }} times.</p>\r\n\t\t</body>\r\n\t</html>\r\n\r\nWe added a *{{ hits }}* placeholder in the template above. For this example, we\r\nwant to replace the placeholder with the number of times this page was viewed.\r\nWe can add that functionality using Hooks.\r\n\r\n\t// filename: /modules/enabled/hit-counter/hits.php\r\n\tfunction hook_render_placeholder_hits() {\r\n\t\t$hits = new FakeClass();\r\n\r\n\t\treturn $hits->getTotal();\r\n\t}\r\n\r\n\tHook::applyFilter(\r\n\t\t'render_placeholder_hits',\r\n\t\t'hook_render_placeholder_hits'\r\n\t);\r\n\r\nThe first parameter of *Hook:applyFilter*, the hook filter, ends in 'hits' which\r\ncorrelates to the name of the placeholder. This hook filter is defined in\r\n'*class.template.php*'. The second parameter is the name of the function to run\r\nwhen we render the placeholder.\r\n\r\nYou can iterate through multidimensional array data using #each placeholders\r\n\r\n\t// Bind the data like this\r\n\t$page->bind('fruits', array(\r\n\t\tarray(\r\n\t\t\t\"name\" => \"apple\",\r\n\t\t\t\"color\" => \"red\"\r\n\t\t), array(\r\n\t\t\t\"name\" => \"banana\",\r\n\t\t\t\"color\" => \"yellow\"\r\n\t\t)\r\n\t));\r\n\r\n\t// in the template\r\n\t{{ #each f in fruits }}\r\n\t\t<p>I like {{ f.color }}, because my {{ f.name }} is {{ f.color }}.</p>\r\n\t{{ /each }}\r\n\r\n### Databases\r\n\r\nThe database connection settings are defined in the */include/global.php* file.\r\nAfter the *LIVE_URL* is set in *global.php* the framework will detect which DB\r\nto use based on the current URL.\r\n\r\nTo get a database instance, use:\r\n\r\n\t$db = DB::getInstance();\r\n\r\nThe DB class is static and will automatically handle suppressing multiple\r\ninstances.\r\n\r\n### Sending emails\r\n\r\nThe Mailer class simplifies sending emails by generating headers for you\r\nand using an easy to use object to clearly define your email. The Mailer can\r\nsend emails using an HTML template or text.\r\n\r\n\t$m = new Mailer();\r\n\t$m->addTo(\"test@test.com\");\r\n\t$m->addFrom(\"from.me@test.com\");\r\n\t$m->addSubject(\"This is a test, don't panic.\");\r\n\t$m->fetchHTML(\"http://test.com/template.php\");\r\n\t// OR\r\n\t$m->msgText(\"This is my message.\")\r\n\t$m->send();\r\n\r\n### CSV\r\n\r\nThe CSV class ensures that all records are properly escaped and allows you to\r\neasily manipulate data inside of a CSV file.\r\n\r\n\t$c = new CSV();\r\n\t$data = array(\r\n\t\t'George',\r\n\t\t'Washington'\r\n\t);\r\n\t$c->add($data);\r\n\r\n\t// Saves to the filesystem\r\n\t$c->save('presidents.csv');\r\n\r\n\t// OR\r\n\r\n\t// Sends the file to the browser, does not save to the filesystem\r\n\t$c->show();\r\n\r\n\r\n### Debugging\r\n\r\nThe *Debug* static class allows you to debug on-screen, via email, or by logging\r\nto a database.\r\n\r\n\t$db = DB::getInstance();\r\n\tDebug::out($db);\r\n\r\n### File System Database (class.fsdb.php)\r\n\r\nSometimes using a database is overkill.  A simple solution is to use the *FSDB*.\r\nIt is very simple and does not allow complex queries, however it is fast, easy\r\nto use and requires no setup, except checking that proper permissions are set.\r\n\r\n\t$fruit = new stdClass();\r\n\r\n\t$fruit->name = \"Apple\";\r\n\t$fruit->color = \"Red\";\r\n\t$fruit->texture = \"Crispy\";\r\n\t$fruit->price = 0.50;\r\n\r\n\t$db = new FSDB();\r\n\r\n\t$db->insert('fruit', $fruit);\r\n\t$data = $db->select('fruit', 'name', 'Banana');\r\n\r\n### Country detection\r\n\r\n*Country detection* uses the *FSDB* to do a quick lookup of the current country.\r\n\r\n\t$i = new IP2CO();\r\n\r\n\t$countryCode = $i->getCountryCode($_SERVER['REMOTE_ADDR']);\r\n\r\n\tif ($countryCode != false) {\r\n\t\techo $countryCode;\r\n\t} else {\r\n\t\techo $_SERVER['REMOTE_ADDR'] . \"(\" . ip2long($_SERVER['REMOTE_ADDR']) . \") Not found in \" . $i->getTable($_SERVER['REMOTE_ADDR']) . \".\";\r\n\t}\r\n\r\n### Mobile detection\r\n\r\nMobile detection is done by comparing the UA (user-agent) to a list of currently\r\navailable mobile and tablet UA.\r\n\r\n\t$md = new MobiDetect();\r\n\r\n\tif ($md->isMobile()) {\r\n\t\t// goto mobile site\r\n\t}\r\n\r\n### Navigation\r\n\r\nThe navigation is generated from JSON. It renders the JSON into a unordered\r\nlist with some classes added for the current active page.\r\n\r\n\t// Add a placeholder in your template\r\n\t{{ TopNav }}\r\n\r\n\t// Create a php file in */modules/*\r\n\trequire_once('include/class.navigation.php');\r\n\r\n\t// create a function to add to the *hook filter*\r\n\tfunction hook_render_placeholder_TopNav() {\r\n\r\n\t\t// Page data is passed via JSON\r\n\t\t$topNavData = '{\r\n\t\t\t\"pages\": [\r\n\t\t\t\t{\r\n\t\t\t\t\t\"title\": \"Nav 1\",\r\n\t\t\t\t\t\"link\": \"/nav1/\"\r\n\t\t\t\t}, {\r\n\t\t\t\t\t\"title\": \"Nav 2\",\r\n\t\t\t\t\t\"link\": \"/nav2/\",\r\n\t\t\t\t\t\"pages\": [\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\"title\": \"Subnav 1\",\r\n\t\t\t\t\t\t\t\"link\": \"/downloads/fpo.pdf\",\r\n\t\t\t\t\t\t\t\"target\": \"_blank\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t]\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}';\r\n\r\n\t\t$topNav = new Navigation($topNavData);\r\n\t\t$topNav->setCurrent($_SERVER['SCRIPT_NAME']);\r\n\r\n\t\treturn $topNav->show();\r\n\t}\r\n\r\n\tHook::applyFilter(\r\n\t\t'render_placeholder_TopNav',\r\n\t\t'hook_render_placeholder_TopNav'\r\n\t);","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}